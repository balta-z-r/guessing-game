{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","currentNode","prompt","text","difference","newGame","updatedURLString","allTrees","yes","_this","start","right","setState","updateText","newText","cn","Object","objectSpread","data","concat","no","response","left","registeringNewNode","newNode","console","log","axios","put","then","catch","e","handleChange","target","value","next","get","error","pos","length","updatedText","substring","setTimeout","this","bind","assertThisInitialized","react_default","a","createElement","onClick","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5cf242b3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currentNode: null,\r\n    prompt: false,\r\n    text: null,\r\n    difference: null,\r\n    newGame: null,\r\n    updatedURLString: \"\",\r\n    allTrees: null\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   if (!this.state.allTrees) {\r\n  //     axios\r\n  //       .get(\"https://binary-tree-list.firebaseio.com.json\")\r\n  //       .then(response => {\r\n  //         console.log(response);\r\n  //         this.setState({ allTrees: response });\r\n  //       })\r\n  //       .catch(error => {\r\n  //         this.setState({ error: true });\r\n  //       });\r\n  //   }\r\n  // }\r\n\r\n  yes = () => {\r\n    if (this.state.text === \"Want to play again?\") {\r\n      this.start();\r\n    } else if (this.state.currentNode.right == null) {\r\n      this.setState({ text: \"\" });\r\n      this.updateText(\"Want to play again?\", 0);\r\n    } else {\r\n      let newText = null;\r\n      let cn = { ...this.state.currentNode };\r\n      if (cn.right.right) {\r\n        newText = cn.right.data;\r\n      } else {\r\n        newText = `Is your game ${cn.right.data}?`;\r\n      }\r\n      this.setState({\r\n        currentNode: cn.right,\r\n        updatedURLString: this.state.updatedURLString + \"/right\"\r\n      });\r\n      this.updateText(newText, 0);\r\n    }\r\n  };\r\n\r\n  no = () => {\r\n    if (this.state.text === \"Want to play again?\") {\r\n      this.setState({\r\n        text: null\r\n      });\r\n    } else if (this.state.currentNode.right == null) {\r\n      this.setState({\r\n        response: null,\r\n        prompt: true\r\n      });\r\n      this.updateText(`What game were you thinking off?`, 0);\r\n    } else {\r\n      let newText = null;\r\n      let cn = { ...this.state.currentNode };\r\n      if (cn.left.right) {\r\n        newText = cn.left.data;\r\n      } else {\r\n        newText = `Is your game ${cn.left.data}?`;\r\n      }\r\n      this.setState({\r\n        currentNode: cn.left,\r\n        updatedURLString: this.state.updatedURLString + \"/left\"\r\n      });\r\n      this.updateText(newText, 0);\r\n    }\r\n  };\r\n\r\n  registeringNewNode = () => {\r\n    const newNode = {\r\n      data: `Is your game a ${this.state.difference}?`,\r\n      left: { ...this.state.currentNode },\r\n      right: {\r\n        data: this.state.newGame\r\n      }\r\n    };\r\n    console.log(\r\n      \"https://binary-tree-list.firebaseio.com/tree\" +\r\n        this.state.updatedURLString +\r\n        \".json\"\r\n    );\r\n    axios\r\n      .put(\r\n        \"https://binary-tree-list.firebaseio.com/tree\" +\r\n          this.state.updatedURLString +\r\n          \".json\",\r\n        newNode\r\n      )\r\n      .then(response => {\r\n        console.log(\"added succ\", response);\r\n      })\r\n      .catch(e => {\r\n        console.log(\"error\", e);\r\n      });\r\n  };\r\n\r\n  handleChange = e => {\r\n    if (this.state.text === \"What game were you thinking off?\") {\r\n      this.setState({ newGame: e.target.value });\r\n    } else if (\r\n      this.state.text ===\r\n      \"What type of game is the game that you thought of?: It's a...\"\r\n    ) {\r\n      this.setState({ difference: e.target.value });\r\n    }\r\n  };\r\n\r\n  next = () => {\r\n    if (this.state.text === \"What game were you thinking off?\") {\r\n      this.updateText(\r\n        `What type of game is the game that you thought of?: It's a...`,\r\n        0\r\n      );\r\n    } else if (\r\n      this.state.text ===\r\n      \"What type of game is the game that you thought of?: It's a...\"\r\n    ) {\r\n      this.registeringNewNode();\r\n      this.yes();\r\n      this.setState({\r\n        prompt: false\r\n      });\r\n    }\r\n  };\r\n\r\n  start = () => {\r\n    axios\r\n      .get(\"https://binary-tree-list.firebaseio.com/tree.json\")\r\n      .then(response => {\r\n        this.setState({\r\n          currentNode: response.data,\r\n          text: \"\",\r\n          updatedURLString: \"\"\r\n        });\r\n        this.updateText(response.data.data, 0);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  updateText = (newText, pos) => {\r\n    if (newText !== this.state.text) {\r\n      console.log(this.state.text.length, newText);\r\n      let updatedText = newText.substring(0, pos);\r\n      this.setState({\r\n        text: updatedText\r\n      });\r\n      setTimeout(\r\n        function() {\r\n          this.updateText(newText, pos + 1);\r\n        }.bind(this),\r\n        50\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // let startButtons = null;\r\n\r\n    // if (this.state.allTrees) {\r\n    //   let keys = [];\r\n    //   for (let key in this.state.allTrees) {\r\n    //     keys.push(key);\r\n    //   }\r\n    //   console.log(keys);\r\n    //   startButtons = keys.map(key => <button>{key}</button>);\r\n    // }\r\n\r\n    return (\r\n      <div>\r\n        {this.state.text ? (\r\n          this.state.text\r\n        ) : (\r\n          <button onClick={this.start}>Play</button>\r\n        )}\r\n\r\n        {this.state.prompt ? (\r\n          <div>\r\n            <input onChange={this.handleChange} />\r\n            <button onClick={this.next}>Enter</button>\r\n          </div>\r\n        ) : null}\r\n        {!this.state.prompt && this.state.text ? (\r\n          <div>\r\n            <button onClick={this.no}>No</button>\r\n            <button onClick={this.yes}>Yes</button>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}